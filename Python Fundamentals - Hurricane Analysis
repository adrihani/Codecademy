import numpy as np

# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1: Update damages data
def update_damages(data):
    updated_damages = []
    for x in data:
        if "M" in x:
            updated_damages.append(float(x.strip("M"))*1000000)
        if "B" in x:
            updated_damages.append(float(x.strip("B"))*1000000000)
        if x == "Damages not recorded":
            updated_damages.append(x)
    return updated_damages

updated_damages = update_damages(damages)
print(updated_damages)

# 2a: Create Hurricane Dictionary function
def hurricanes_dict(name, month, year, wind, area, damage, death):
    hurricanes = dict()
    num_hurricanes = len(names)
    for i in range(num_hurricanes):
        hurricanes[name[i]] = {
            "Name": name[i], 
            "Month": month[i], 
            "Year": year[i],
            "Max Sustained Wind": wind[i],
            "Areas Affected": area[i],
            "Damage": damage[i],
            "Deaths": death[i]
        }
    return hurricanes

# 2b: Create Hurricane Dictionary
hurricanes = hurricanes_dict(
names,
months,
years,
max_sustained_winds,
areas_affected,
updated_damages,
deaths)

# 2c: Check
print(hurricanes)

# 3a: Create Hurricanes By Year Dictionary Function
def year_dict(dictionary):
    hurricanes_by_year = dict()
    for hurricane in hurricanes:
        year = hurricanes[hurricane]["Year"]
        each_hurricane = hurricanes[hurricane]
        if year not in hurricanes_by_year:
            hurricanes_by_year[year] = [each_hurricane]
        else:
            hurricanes_by_year[year].append(each_hurricane)
    return hurricanes_by_year

# Create Hurricanes By Year Dictionary
hurricanes_by_year = year_dict(hurricanes)

# Check
print(hurricanes_by_year[1998])

# 4a: Create Count of Affected Areas function:
def count_affected_areas(hurricanes):
  affected_areas_count = dict()
  for cane in hurricanes:
    for area in hurricanes[cane]['Areas Affected']:
      if area not in affected_areas_count:
        affected_areas_count[area] = 1
      else:
        affected_areas_count[area] += 1
  return affected_areas_count

# 4b: Create Dictionary of Areas 
affected_areas_count = count_affected_areas(hurricanes)
print(affected_areas_count)

# 5: Area Most Affected function
def most_affected(dictionary):
    top_area = ''
    top_count = 0
    for area in dictionary:
        if dictionary[area] > top_count:
            top_count = dictionary[area]
            top_area = area
    return top_area, top_count

# Check
print(most_affected(affected_areas_count))

# 6: Most Deaths function
def most_deaths(dictionary):
    top_hurricane = ''
    top_deaths = 0
    for hurricane in dictionary:
        if dictionary[hurricane]["Deaths"] > top_deaths:
            top_hurricane = dictionary[hurricane]["Name"]
            top_death = dictionary[hurricane]["Deaths"]
    return top_hurricane, top_death

# Check
print(most_deaths(hurricanes))

# 7: Mortality Scale Function

def mortality_scale(dictionary):
    new_dict = {}
    return_dict = {}
    scale = {
        0 : 0,
        1 : 100,
        2 : 500,
        3 : 1000,
        4 : 10000,
        5 : 10001}
    for hurricane in dictionary:
        current_cane = dictionary[hurricane]
        for x in scale:
            if dictionary[hurricane]["Deaths"] <= scale[x]:
                if x in new_dict:
                    new_dict[x].append(dictionary[hurricane])
                    break
                else: 
                    new_dict[x]= [dictionary[hurricane]]
                    break
            else: 
                None
            return_dict.update(new_dict)
    return return_dict

# Check
print(mortality_scale(hurricanes))

# 8: Most Damage function

def most_damage(dictionary):
    top_hurricane = ''
    top_damage = 0
    for hurricane in dictionary:
        if dictionary[hurricane]["Damage"] == "Damages not recorded":
            None
        else: 
            int_damage = int(float(dictionary[hurricane]["Damage"]))
            if int_damage > top_damage:
                top_hurricane = dictionary[hurricane]["Name"]
                top_damage = int(float(dictionary[hurricane]["Damage"]))
            else:
                None
    return top_hurricane, top_damage

# Check
print(most_damage(hurricanes))

# 9: Damage Function
def damage_scale(dictionary):
    new_dict = {}
    return_dict = {}
    scale = {
        0 : 0,
        1 : 100000000,
        2 : 1000000000,
        3 : 10000000000,
        4 : 50000000000,
        5 : 50000000001}
    for hurricane in dictionary:
        if dictionary[hurricane]["Damage"] == "Damages not recorded":
            dictionary[hurricane]["Damage"] = 0
        else:
            dictionary[hurricane]["Damage"] = int(float(dictionary[hurricane]["Damage"]))
        for x in scale:
            if dictionary[hurricane]["Damage"] <= scale[x]:
                if x in new_dict:
                    new_dict[x].append(dictionary[hurricane])
                    break
                else: 
                    new_dict[x]= [dictionary[hurricane]]
                    break
            else:None
        return_dict.update(new_dict)
    return return_dict

# Check
hurricane_by_damage = damage_scale(hurricanes)
print(hurricane_by_damage)
